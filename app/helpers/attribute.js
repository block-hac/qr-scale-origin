export function getAttributeLocaleText(selectedLocale, attribute) {
  if (!attribute) {
    return null;
  }
  const {labelList, code} = attribute;

  const localeName = labelList.find(label => label.localeId === selectedLocale.id);

  if (!localeName) {
    return code;
  }
  return localeName.text || code;
}

export function getAttributeOptionLocaleText(selectedLocale, attributeOption) {
  if (!attributeOption) {
    return null;
  }
  const {labelList, value} = attributeOption;

  const localeName = labelList.find(label => label.localeId === selectedLocale.id);

  if (!localeName) {
    return value;
  }
  return localeName.text || value;
}

export function getMetricAttributeOptionLocaleText(selectedLocale, metricAttributeOption) {
  if (!metricAttributeOption) {
    return null;
  }
  const {nameList, name} = metricAttributeOption;

  const localeName = nameList.find(name => name.localeId === selectedLocale.id);

  if (!localeName) {
    return name;
  }
  return localeName.text || name;
}

export function getFieldTypeByAttributeType(attributeType, usageType = null) {
  const attributeTypeToFieldType = {
    Text: 'text',
    TextArea: 'textarea',
    Number: 'number',
    Price: 'number',
    Date: 'date',
    Identifier: 'text',
    SimpleSelect: 'select',
    MultiSelect: 'select',
    Metric: 'select',
    Image: 'file',
    File: 'file',
    Video: 'file',
    YesNo: 'toggle',
    Link: 'text',
    AutoGenerated: 'text',
    CustomEntity: 'select'
  };

  const imageTypeToFieldType = {
    Link: 'text',
    Uploaded: 'file'
  };

  const videoTypeToFieldType = {
    Embedded: 'textarea',
    Link: 'text',
    Uploaded: 'file'
  };

  switch (attributeType) {
    case 'Image':
      return imageTypeToFieldType[usageType];
    case 'Video':
      return videoTypeToFieldType[usageType];
    default:
      return attributeTypeToFieldType[attributeType];
  }
}
